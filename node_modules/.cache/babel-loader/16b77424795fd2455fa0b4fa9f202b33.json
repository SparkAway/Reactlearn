{"ast":null,"code":"import { useState, useMemo, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport { useMapContext } from '@uiw/react-baidu-map-map';\nimport { useProperties, usePrevious } from '@uiw/react-baidu-map-utils';\n\nfunction getCustomOverlay() {\n  return class extends BMap.Overlay {\n    constructor(elm, _position, paneName) {\n      super();\n      this.container = void 0;\n      this.map = void 0;\n      this.paneName = void 0;\n      this.position = void 0;\n      this.offset = void 0;\n\n      this.initialize = map => {\n        var panes = map.getPanes();\n        this.container.style.position = 'absolute';\n        this.map = map;\n        panes[this.paneName].appendChild(this.container);\n        return this.container;\n      };\n\n      this.draw = () => {\n        if (this.position == null || this.map == null) {\n          return;\n        }\n\n        var position = this.map.pointToOverlayPixel(this.position);\n        var {\n          width = 0,\n          height = 0\n        } = this.offset || {};\n        this.container.style.left = position.x + width + \"px\";\n        this.container.style.top = position.y + height + \"px\";\n      };\n\n      this.setOffset = offset => {\n        this.offset = offset;\n        this.draw();\n      };\n\n      this.setPosition = position => {\n        this.position = position;\n        this.draw();\n      };\n\n      this.setVisiable = visiable => {\n        this.container.style.display = visiable ? 'block' : 'none';\n      };\n\n      this.getPosition = () => {\n        return this.position;\n      };\n\n      this.setZIndex = index => {\n        this.container.style.zIndex = index.toString();\n      };\n\n      this.container = elm;\n      this.paneName = paneName || 'markerPane';\n      this.position = _position;\n    }\n\n  };\n}\n\nexport function useCustomOverlay(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var {\n    children,\n    paneName,\n    position\n  } = props;\n  var {\n    map\n  } = useMapContext();\n  var [customOverlay, setCustomOverlay] = useState();\n  var [div, setDiv] = useState();\n  var [portal, setPortal] = useState();\n  var [count, setCount] = useState(0);\n  useEffect(() => {\n    return () => {\n      if (map && customOverlay) {\n        map.removeOverlay(customOverlay);\n      }\n    };\n  }, [customOverlay, map]);\n  useMemo(() => {\n    if (map && !portal && document) {\n      var elm = document.createElement('div');\n      var CustomOverlay = getCustomOverlay();\n      var portalInstance = /*#__PURE__*/ReactDOM.createPortal(children, elm);\n      var CompOverlay = new CustomOverlay(elm, position, paneName);\n      setCount(count + 1);\n      setDiv(elm);\n      map.addOverlay(CompOverlay);\n      setPortal(portalInstance);\n      setCustomOverlay(CompOverlay);\n    }\n  }, [children, count, map, paneName, portal, position]);\n  var prevCount = usePrevious(count);\n  useMemo(() => {\n    if (map && div && children && count === prevCount) {\n      var portalInstance = /*#__PURE__*/ReactDOM.createPortal(children, div);\n      setPortal(portalInstance);\n      setCount(count + 1);\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [children, customOverlay]);\n  useProperties(customOverlay, props, ['ZIndex', 'Offset', 'Position', 'Visiable']);\n  return {\n    portal,\n    setPortal,\n    customOverlay,\n    setCustomOverlay\n  };\n}","map":{"version":3,"mappings":"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","names":["useState","useMemo","useEffect","ReactDOM","useMapContext","useProperties","usePrevious","getCustomOverlay","BMap","Overlay","constructor","elm","position","paneName","container","map","offset","initialize","panes","getPanes","style","appendChild","draw","pointToOverlayPixel","width","height","left","x","top","y","setOffset","setPosition","setVisiable","visiable","display","getPosition","setZIndex","index","zIndex","toString","useCustomOverlay","props","children","customOverlay","setCustomOverlay","div","setDiv","portal","setPortal","count","setCount","removeOverlay","document","createElement","CustomOverlay","portalInstance","createPortal","CompOverlay","addOverlay","prevCount"],"sources":["D:\\HB\\ReactProject\\22_3_8\\backboot\\node_modules\\@uiw\\react-baidu-map-custom-overlay\\src\\useCustomOverlay.tsx"],"sourcesContent":["import { useState, useMemo, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport { useMapContext } from '@uiw/react-baidu-map-map';\nimport { useProperties, usePrevious } from '@uiw/react-baidu-map-utils';\nimport { CustomOverlayProps } from './';\n\nfunction getCustomOverlay() {\n  return class extends BMap.Overlay {\n    public container: HTMLDivElement;\n    public map!: BMap.Map;\n    public paneName: keyof BMap.MapPanes;\n    public position?: BMap.Point;\n    public offset?: BMap.Size;\n    constructor(elm: HTMLDivElement, position?: BMap.Point, paneName?: CustomOverlayProps['paneName']) {\n      super();\n      this.container = elm;\n      this.paneName = paneName || 'markerPane';\n      this.position = position;\n    }\n    public initialize: (map: BMap.Map) => HTMLElement = (map) => {\n      const panes = map.getPanes();\n      this.container.style.position = 'absolute';\n      this.map = map;\n      panes[this.paneName]!.appendChild(this.container);\n      return this.container;\n    };\n    public draw = () => {\n      if (this.position == null || this.map == null) {\n        return;\n      }\n      const position = this.map.pointToOverlayPixel(this.position);\n      const { width = 0, height = 0 } = this.offset || {};\n\n      this.container.style.left = `${position.x + width}px`;\n      this.container.style.top = `${position.y + height}px`;\n    };\n    public setOffset = (offset: BMap.Size) => {\n      this.offset = offset;\n      this.draw();\n    };\n    public setPosition = (position: BMap.Point) => {\n      this.position = position;\n      this.draw();\n    };\n    public setVisiable = (visiable: boolean) => {\n      this.container.style.display = visiable ? 'block' : 'none';\n    };\n\n    public getPosition = () => {\n      return this.position;\n    };\n\n    public setZIndex = (index: number) => {\n      this.container.style.zIndex = index.toString();\n    };\n  };\n}\n\nexport interface UseCustomOverlay extends CustomOverlayProps {}\n\nexport function useCustomOverlay(props = {} as UseCustomOverlay) {\n  const { children, paneName, position } = props;\n  const { map } = useMapContext();\n  const [customOverlay, setCustomOverlay] = useState<BMap.Overlay>();\n  const [div, setDiv] = useState<HTMLDivElement>();\n  const [portal, setPortal] = useState<React.ReactPortal>();\n  const [count, setCount] = useState(0);\n  useEffect(() => {\n    return () => {\n      if (map && customOverlay) {\n        map.removeOverlay(customOverlay);\n      }\n    };\n  }, [customOverlay, map]);\n  useMemo(() => {\n    if (map && !portal && document) {\n      const elm = document.createElement('div');\n      const CustomOverlay = getCustomOverlay();\n      const portalInstance = ReactDOM.createPortal(children, elm);\n      const CompOverlay = new CustomOverlay(elm, position, paneName);\n      setCount(count + 1);\n      setDiv(elm);\n      map.addOverlay(CompOverlay);\n      setPortal(portalInstance);\n      setCustomOverlay(CompOverlay);\n    }\n  }, [children, count, map, paneName, portal, position]);\n\n  const prevCount = usePrevious(count);\n  useMemo(() => {\n    if (map && div && children && count === prevCount) {\n      const portalInstance = ReactDOM.createPortal(children, div);\n      setPortal(portalInstance);\n      setCount(count + 1);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [children, customOverlay]);\n\n  useProperties<BMap.Overlay, UseCustomOverlay>(customOverlay!, props, ['ZIndex', 'Offset', 'Position', 'Visiable']);\n  return {\n    portal,\n    setPortal,\n    customOverlay,\n    setCustomOverlay,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}