{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport { useMapContext } from '@uiw/react-baidu-map-map';\nimport { noop, useEnableProperties, useProperties, useVisiable, useEventProperties } from '@uiw/react-baidu-map-utils';\nexport function usePolygon(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var {\n    strokeColor,\n    fillColor,\n    strokeWeight,\n    strokeOpacity,\n    fillOpacity,\n    strokeStyle,\n    enableMassClear,\n    enableEditing,\n    enableClicking\n  } = props;\n  var {\n    map\n  } = useMapContext();\n  var [polygon, setPolygon] = useState();\n  var [path, setPath] = useState(props.path || []);\n  var opts = {\n    strokeColor,\n    fillColor,\n    strokeWeight,\n    strokeOpacity,\n    fillOpacity,\n    strokeStyle,\n    enableMassClear,\n    enableEditing,\n    enableClicking\n  };\n  useEffect(() => {\n    if (!BMap || !map) return noop;\n    var points = (path || []).map(item => new BMap.Point(item.lng, item.lat));\n    var instance = new BMap.Polygon(points, opts);\n    map.addOverlay(instance);\n    setPolygon(instance);\n    return function () {\n      map.removeOverlay(instance);\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [map]);\n  useEffect(() => {\n    if (path && polygon) {\n      var points = path.map(item => new BMap.Point(item.lng, item.lat));\n      polygon.setPath(points);\n    }\n  }, [polygon, path]);\n  useVisiable(polygon, props);\n  useEventProperties(polygon, props, ['Click', 'DoubleClick', 'MouseDown', 'MouseUp', 'MouseOut', 'MouseOver', 'Remove', 'LineUpdate']);\n  useEnableProperties(polygon, props, ['Editing', 'MassClear']); // PositionAt\n\n  useProperties(polygon, props, ['StrokeColor', 'StrokeOpacity', 'FillColor', 'FillOpacity', 'StrokeWeight', 'StrokeStyle']);\n  return {\n    polygon,\n    setPolygon,\n    path,\n    setPath\n  };\n}","map":{"version":3,"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,aAAT,QAA8B,0BAA9B;AACA,SAASC,IAAT,EAAeC,mBAAf,EAAoCC,aAApC,EAAmDC,WAAnD,EAAgEC,kBAAhE,QAA0F,4BAA1F;AAKA,OAAO,SAASC,UAAT,CAAoBC,KAApB,EAA8C;AAAA,MAA1BA,KAA0B;AAA1BA,SAA0B,GAAlB,EAARA;AAA0B;;AACnD,MAAM;AACJC,eADI;AAEJC,aAFI;AAGJC,gBAHI;AAIJC,iBAJI;AAKJC,eALI;AAMJC,eANI;AAOJC,mBAPI;AAQJC,iBARI;AASJC;AATI,MAUFT,KAVJ;AAWA,MAAM;AAAEU;AAAF,MAAUjB,aAAa,EAA7B;AACA,MAAM,CAACkB,OAAD,EAAUC,UAAV,IAAwBrB,QAAQ,EAAtC;AACA,MAAM,CAACsB,IAAD,EAAOC,OAAP,IAAkBvB,QAAQ,CAACS,KAAK,CAACa,IAANb,IAAc,EAAf,CAAhC;AAEA,MAAMe,IAAI,GAAG;AACXd,eADW;AAEXC,aAFW;AAGXC,gBAHW;AAIXC,iBAJW;AAKXC,eALW;AAMXC,eANW;AAOXC,mBAPW;AAQXC,iBARW;AASXC;AATW,GAAb;AAYAjB,WAAS,CAAC,MAAM;AACd,QAAI,CAACwB,IAAD,IAAS,CAACN,GAAd,EAAmB,OAAOhB,IAAP;AACnB,QAAMuB,MAAM,GAAG,CAACJ,IAAI,IAAI,EAAT,EAAaH,GAAb,CAAkBQ,IAAD,IAAU,IAAIF,IAAI,CAACG,KAAT,CAAeD,IAAI,CAACE,GAApB,EAAyBF,IAAI,CAACG,GAA9B,CAA3B,CAAf;AACA,QAAMC,QAAQ,GAAG,IAAIN,IAAI,CAACO,OAAT,CAAiBN,MAAjB,EAAyBF,IAAzB,CAAjB;AACAL,OAAG,CAACc,UAAJd,CAAeY,QAAfZ;AACAE,cAAU,CAACU,QAAD,CAAVV;AACA,WAAO,YAAY;AACjBF,SAAG,CAACe,aAAJf,CAAkBY,QAAlBZ;AADF,MANc,CASd;AATO,KAUN,CAACA,GAAD,CAVM,CAATlB;AAYAA,WAAS,CAAC,MAAM;AACd,QAAIqB,IAAI,IAAIF,OAAZ,EAAqB;AACnB,UAAMM,MAAM,GAAGJ,IAAI,CAACH,GAALG,CAAUK,IAAD,IAAU,IAAIF,IAAI,CAACG,KAAT,CAAeD,IAAI,CAACE,GAApB,EAAyBF,IAAI,CAACG,GAA9B,CAAnBR,CAAf;AACAF,aAAO,CAACG,OAARH,CAAgBM,MAAhBN;AACD;AAJM,KAKN,CAACA,OAAD,EAAUE,IAAV,CALM,CAATrB;AAOAK,aAAW,CAACc,OAAD,EAAWX,KAAX,CAAXH;AACAC,oBAAkB,CAA2Ba,OAA3B,EAAqCX,KAArC,EAA4C,CAC5D,OAD4D,EAE5D,aAF4D,EAG5D,WAH4D,EAI5D,SAJ4D,EAK5D,UAL4D,EAM5D,WAN4D,EAO5D,QAP4D,EAQ5D,YAR4D,CAA5C,CAAlBF;AAUAH,qBAAmB,CAA2BgB,OAA3B,EAAqCX,KAArC,EAA4C,CAAC,SAAD,EAAY,WAAZ,CAA5C,CAAnBL,CA1DmD,CA2DnD;;AACAC,eAAa,CAA6Be,OAA7B,EAAuCX,KAAvC,EAA8C,CACzD,aADyD,EAEzD,eAFyD,EAGzD,WAHyD,EAIzD,aAJyD,EAKzD,cALyD,EAMzD,aANyD,CAA9C,CAAbJ;AASA,SAAO;AACLe,WADK;AAELC,cAFK;AAGLC,QAHK;AAILC;AAJK,GAAP;AAMD","names":["useState","useEffect","useMapContext","noop","useEnableProperties","useProperties","useVisiable","useEventProperties","usePolygon","props","strokeColor","fillColor","strokeWeight","strokeOpacity","fillOpacity","strokeStyle","enableMassClear","enableEditing","enableClicking","map","polygon","setPolygon","path","setPath","opts","BMap","points","item","Point","lng","lat","instance","Polygon","addOverlay","removeOverlay"],"sources":["D:\\HB\\ReactProject\\22_3_8\\backboot\\node_modules\\@uiw\\react-baidu-map-polygon\\src\\usePolygon.tsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useMapContext } from '@uiw/react-baidu-map-map';\nimport { noop, useEnableProperties, useProperties, useVisiable, useEventProperties } from '@uiw/react-baidu-map-utils';\nimport { PolygonProps } from './';\n\nexport interface UsePolygon extends PolygonProps {}\n\nexport function usePolygon(props = {} as UsePolygon) {\n  const {\n    strokeColor,\n    fillColor,\n    strokeWeight,\n    strokeOpacity,\n    fillOpacity,\n    strokeStyle,\n    enableMassClear,\n    enableEditing,\n    enableClicking,\n  } = props;\n  const { map } = useMapContext();\n  const [polygon, setPolygon] = useState<BMap.Polygon>();\n  const [path, setPath] = useState(props.path || []);\n\n  const opts = {\n    strokeColor,\n    fillColor,\n    strokeWeight,\n    strokeOpacity,\n    fillOpacity,\n    strokeStyle,\n    enableMassClear,\n    enableEditing,\n    enableClicking,\n  };\n\n  useEffect(() => {\n    if (!BMap || !map) return noop;\n    const points = (path || []).map((item) => new BMap.Point(item.lng, item.lat));\n    const instance = new BMap.Polygon(points, opts);\n    map.addOverlay(instance);\n    setPolygon(instance);\n    return function () {\n      map.removeOverlay(instance);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [map]);\n\n  useEffect(() => {\n    if (path && polygon) {\n      const points = path.map((item) => new BMap.Point(item.lng, item.lat));\n      polygon.setPath(points);\n    }\n  }, [polygon, path]);\n\n  useVisiable(polygon!, props);\n  useEventProperties<BMap.Polygon, UsePolygon>(polygon!, props, [\n    'Click',\n    'DoubleClick',\n    'MouseDown',\n    'MouseUp',\n    'MouseOut',\n    'MouseOver',\n    'Remove',\n    'LineUpdate',\n  ]);\n  useEnableProperties<BMap.Polygon, UsePolygon>(polygon!, props, ['Editing', 'MassClear']);\n  // PositionAt\n  useProperties<BMap.Polygon, PolygonProps>(polygon!, props, [\n    'StrokeColor',\n    'StrokeOpacity',\n    'FillColor',\n    'FillOpacity',\n    'StrokeWeight',\n    'StrokeStyle',\n  ]);\n\n  return {\n    polygon,\n    setPolygon,\n    path,\n    setPath,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}