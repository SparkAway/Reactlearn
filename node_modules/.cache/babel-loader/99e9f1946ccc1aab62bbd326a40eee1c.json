{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport { useState, useMemo } from 'react';\nimport { useMapContext } from '@uiw/react-baidu-map-map';\nimport { useVisiable } from '@uiw/react-baidu-map-utils';\nexport function useCanvasLayer(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var {\n    zIndex,\n    paneName\n  } = props;\n  var {\n    map\n  } = useMapContext();\n  var [canvasLayer, setCanvasLayer] = useState();\n  useMemo(() => {\n    if (map && BMap && !canvasLayer) {\n      var update = function update() {\n        var self = this;\n        props.update && props.update(_extends({}, self, {\n          BMap,\n          map\n        }));\n      };\n\n      var instance = new BMap.CanvasLayer({\n        zIndex,\n        paneName,\n        update\n      });\n      map.addOverlay(instance);\n      setCanvasLayer(instance);\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [map, canvasLayer]);\n  useVisiable(canvasLayer, props);\n  return {\n    canvasLayer,\n    setCanvasLayer\n  };\n}","map":{"version":3,"mappings":";AAAA,SAASA,QAAT,EAAmBC,OAAnB,QAAkC,OAAlC;AACA,SAASC,aAAT,QAA8B,0BAA9B;AACA,SAASC,WAAT,QAA4B,4BAA5B;AAcA,OAAO,SAASC,cAAT,CAAwBC,KAAxB,EAAsD;AAAA,MAA9BA,KAA8B;AAA9BA,SAA8B,GAAtB,EAARA;AAA8B;;AAC3D,MAAM;AAAEC,UAAF;AAAUC;AAAV,MAAuBF,KAA7B;AACA,MAAM;AAAEG;AAAF,MAAUN,aAAa,EAA7B;AACA,MAAM,CAACO,WAAD,EAAcC,cAAd,IAAgCV,QAAQ,EAA9C;AACAC,SAAO,CAAC,MAAM;AACZ,QAAIO,GAAG,IAAIG,IAAPH,IAAe,CAACC,WAApB,EAAiC;AAC/B,UAAMG,MAAM,GAAG,SAATA,MAAS,GAAmC;AAChD,YAAMC,IAAI,GAAG,IAAb;AACAR,aAAK,CAACO,MAANP,IAAgBA,KAAK,CAACO,MAANP,cAAkBQ,IAAlB;AAAwBF,cAAxB;AAA8BH;AAA9B,WAAhBH;AAFF;;AAIA,UAAMS,QAAQ,GAAG,IAAIH,IAAI,CAACI,WAAT,CAAqB;AAAET,cAAF;AAAUC,gBAAV;AAAoBK;AAApB,OAArB,CAAjB;AACAJ,SAAG,CAACQ,UAAJR,CAAeM,QAAfN;AACAE,oBAAc,CAACI,QAAD,CAAdJ;AARU,MAUZ;;AAVK,KAWJ,CAACF,GAAD,EAAMC,WAAN,CAXI,CAAPR;AAaAE,aAAW,CAACM,WAAD,EAAeJ,KAAf,CAAXF;AAEA,SAAO;AACLM,eADK;AAELC;AAFK,GAAP;AAID","names":["useState","useMemo","useMapContext","useVisiable","useCanvasLayer","props","zIndex","paneName","map","canvasLayer","setCanvasLayer","BMap","update","self","instance","CanvasLayer","addOverlay"],"sources":["D:\\HB\\ReactProject\\22_3_8\\backboot\\node_modules\\@uiw\\react-baidu-map-canvas-layer\\src\\useCanvasLayer.tsx"],"sourcesContent":["import { useState, useMemo } from 'react';\nimport { useMapContext } from '@uiw/react-baidu-map-map';\nimport { useVisiable } from '@uiw/react-baidu-map-utils';\nimport { CanvasLayerProps } from '.';\n\nexport interface UseCanvasLayer extends CanvasLayerProps {}\n\nexport interface CanvasLayerResult {\n  canvas: React.HTMLAttributes<HTMLCanvasElement>;\n  ba: React.HTMLAttributes<HTMLCanvasElement>;\n  options: BMap.CanvasLayerOptions;\n  zIndex: number;\n  map: UseCanvasLayer['map'];\n  BMap: UseCanvasLayer['BMap'];\n}\n\nexport function useCanvasLayer(props = {} as UseCanvasLayer) {\n  const { zIndex, paneName } = props;\n  const { map } = useMapContext();\n  const [canvasLayer, setCanvasLayer] = useState<BMap.CanvasLayer>();\n  useMemo(() => {\n    if (map && BMap && !canvasLayer) {\n      const update = function (this: CanvasLayerResult) {\n        const self = this;\n        props.update && props.update({ ...self, BMap, map });\n      };\n      const instance = new BMap.CanvasLayer({ zIndex, paneName, update });\n      map.addOverlay(instance);\n      setCanvasLayer(instance);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [map, canvasLayer]);\n\n  useVisiable(canvasLayer!, props);\n\n  return {\n    canvasLayer,\n    setCanvasLayer,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}