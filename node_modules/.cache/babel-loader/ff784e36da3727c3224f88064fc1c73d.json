{"ast":null,"code":"import { useState, useEffect, useMemo } from 'react';\nimport { useMapContext } from '@uiw/react-baidu-map-map';\nimport { useEnableProperties, useProperties, useVisiable, useEventProperties } from '@uiw/react-baidu-map-utils';\nexport function usePolyline(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var {\n    strokeColor,\n    strokeWeight,\n    strokeOpacity,\n    strokeStyle,\n    enableMassClear,\n    enableEditing,\n    enableClicking,\n    icons\n  } = props;\n  var {\n    map\n  } = useMapContext();\n  var [polyline, setPolyline] = useState();\n  var [path, setPath] = useState(props.path || []); // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  var opts = {\n    strokeColor,\n    strokeWeight,\n    strokeOpacity,\n    strokeStyle,\n    enableMassClear,\n    enableEditing,\n    enableClicking,\n    icons\n  };\n  useEffect(() => {\n    return () => {\n      if (polyline && map) {\n        map.removeOverlay(polyline);\n      }\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [map]);\n  useMemo(() => {\n    if (map && !polyline) {\n      var points = (props.path || []).map(item => new BMap.Point(item.lng, item.lat));\n      var instance = new BMap.Polyline(points, opts);\n      map.addOverlay(instance);\n      setPolyline(instance);\n    }\n  }, [map, opts, polyline, props.path]);\n  useEffect(() => {\n    if (path && polyline) {\n      var points = path.map(item => new BMap.Point(item.lng, item.lat));\n      polyline.setPath(points);\n    }\n  }, [polyline, path]);\n  useVisiable(polyline, props);\n  useEventProperties(polyline, props, ['Click', 'DblClick', 'MouseDown', 'MouseUp', 'MouseOut', 'MouseOver', 'Remove', 'LineUpdate']);\n  useEnableProperties(polyline, props, ['Editing', 'MassClear']); // PositionAt\n\n  useProperties(polyline, props, ['StrokeColor', 'StrokeOpacity', 'StrokeWeight', 'StrokeStyle']);\n  return {\n    polyline,\n    setPolyline,\n    path,\n    setPath\n  };\n}","map":{"version":3,"mappings":"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","names":["useState","useEffect","useMemo","useMapContext","useEnableProperties","useProperties","useVisiable","useEventProperties","usePolyline","props","strokeColor","strokeWeight","strokeOpacity","strokeStyle","enableMassClear","enableEditing","enableClicking","icons","map","polyline","setPolyline","path","setPath","opts","removeOverlay","points","item","BMap","Point","lng","lat","instance","Polyline","addOverlay"],"sources":["D:\\HB\\ReactProject\\22_3_8\\backboot\\node_modules\\@uiw\\react-baidu-map-polyline\\src\\usePolyline.tsx"],"sourcesContent":["import { useState, useEffect, useMemo } from 'react';\nimport { useMapContext } from '@uiw/react-baidu-map-map';\nimport { useEnableProperties, useProperties, useVisiable, useEventProperties } from '@uiw/react-baidu-map-utils';\nimport { PolylineProps } from './';\n\nexport interface UsePolyline extends PolylineProps {}\n\nexport function usePolyline(props = {} as UsePolyline) {\n  const {\n    strokeColor,\n    strokeWeight,\n    strokeOpacity,\n    strokeStyle,\n    enableMassClear,\n    enableEditing,\n    enableClicking,\n    icons,\n  } = props;\n  const { map } = useMapContext();\n  const [polyline, setPolyline] = useState<BMap.Polyline>();\n  const [path, setPath] = useState(props.path || []);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const opts = {\n    strokeColor,\n    strokeWeight,\n    strokeOpacity,\n    strokeStyle,\n    enableMassClear,\n    enableEditing,\n    enableClicking,\n    icons,\n  };\n  useEffect(() => {\n    return () => {\n      if (polyline && map) {\n        map.removeOverlay(polyline);\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [map]);\n  useMemo(() => {\n    if (map && !polyline) {\n      const points = (props.path || []).map((item) => new BMap.Point(item.lng, item.lat));\n      const instance = new BMap.Polyline(points, opts);\n      map.addOverlay(instance);\n      setPolyline(instance);\n    }\n  }, [map, opts, polyline, props.path]);\n\n  useEffect(() => {\n    if (path && polyline) {\n      const points = path.map((item) => new BMap.Point(item.lng, item.lat));\n      polyline.setPath(points);\n    }\n  }, [polyline, path]);\n\n  useVisiable(polyline!, props);\n  useEventProperties<BMap.Polyline, UsePolyline>(polyline!, props, [\n    'Click',\n    'DblClick',\n    'MouseDown',\n    'MouseUp',\n    'MouseOut',\n    'MouseOver',\n    'Remove',\n    'LineUpdate',\n  ]);\n  useEnableProperties<BMap.Polyline, UsePolyline>(polyline!, props, ['Editing', 'MassClear']);\n  // PositionAt\n  useProperties<BMap.Polyline, UsePolyline>(polyline!, props, [\n    'StrokeColor',\n    'StrokeOpacity',\n    'StrokeWeight',\n    'StrokeStyle',\n  ]);\n\n  return {\n    polyline,\n    setPolyline,\n    path,\n    setPath,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}