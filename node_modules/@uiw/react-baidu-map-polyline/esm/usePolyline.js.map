{
  "version": 3,
  "sources": [
    "../src/usePolyline.tsx"
  ],
  "names": [
    "useState",
    "useEffect",
    "useMemo",
    "useMapContext",
    "useEnableProperties",
    "useProperties",
    "useVisiable",
    "useEventProperties",
    "usePolyline",
    "props",
    "strokeColor",
    "strokeWeight",
    "strokeOpacity",
    "strokeStyle",
    "enableMassClear",
    "enableEditing",
    "enableClicking",
    "icons",
    "map",
    "polyline",
    "setPolyline",
    "path",
    "setPath",
    "opts",
    "removeOverlay",
    "points",
    "item",
    "BMap",
    "Point",
    "lng",
    "lat",
    "instance",
    "Polyline",
    "addOverlay"
  ],
  "mappings": "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",
  "sourcesContent": [
    "import { useState, useEffect, useMemo } from 'react';\nimport { useMapContext } from '@uiw/react-baidu-map-map';\nimport { useEnableProperties, useProperties, useVisiable, useEventProperties } from '@uiw/react-baidu-map-utils';\nimport { PolylineProps } from './';\n\nexport interface UsePolyline extends PolylineProps {}\n\nexport function usePolyline(props = {} as UsePolyline) {\n  const {\n    strokeColor,\n    strokeWeight,\n    strokeOpacity,\n    strokeStyle,\n    enableMassClear,\n    enableEditing,\n    enableClicking,\n    icons,\n  } = props;\n  const { map } = useMapContext();\n  const [polyline, setPolyline] = useState<BMap.Polyline>();\n  const [path, setPath] = useState(props.path || []);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const opts = {\n    strokeColor,\n    strokeWeight,\n    strokeOpacity,\n    strokeStyle,\n    enableMassClear,\n    enableEditing,\n    enableClicking,\n    icons,\n  };\n  useEffect(() => {\n    return () => {\n      if (polyline && map) {\n        map.removeOverlay(polyline);\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [map]);\n  useMemo(() => {\n    if (map && !polyline) {\n      const points = (props.path || []).map((item) => new BMap.Point(item.lng, item.lat));\n      const instance = new BMap.Polyline(points, opts);\n      map.addOverlay(instance);\n      setPolyline(instance);\n    }\n  }, [map, opts, polyline, props.path]);\n\n  useEffect(() => {\n    if (path && polyline) {\n      const points = path.map((item) => new BMap.Point(item.lng, item.lat));\n      polyline.setPath(points);\n    }\n  }, [polyline, path]);\n\n  useVisiable(polyline!, props);\n  useEventProperties<BMap.Polyline, UsePolyline>(polyline!, props, [\n    'Click',\n    'DblClick',\n    'MouseDown',\n    'MouseUp',\n    'MouseOut',\n    'MouseOver',\n    'Remove',\n    'LineUpdate',\n  ]);\n  useEnableProperties<BMap.Polyline, UsePolyline>(polyline!, props, ['Editing', 'MassClear']);\n  // PositionAt\n  useProperties<BMap.Polyline, UsePolyline>(polyline!, props, [\n    'StrokeColor',\n    'StrokeOpacity',\n    'StrokeWeight',\n    'StrokeStyle',\n  ]);\n\n  return {\n    polyline,\n    setPolyline,\n    path,\n    setPath,\n  };\n}\n"
  ]
}