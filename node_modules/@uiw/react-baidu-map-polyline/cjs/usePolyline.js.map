{
  "version": 3,
  "sources": [
    "../src/usePolyline.tsx"
  ],
  "names": [
    "usePolyline",
    "props",
    "strokeColor",
    "strokeWeight",
    "strokeOpacity",
    "strokeStyle",
    "enableMassClear",
    "enableEditing",
    "enableClicking",
    "icons",
    "map",
    "polyline",
    "setPolyline",
    "path",
    "setPath",
    "opts",
    "removeOverlay",
    "points",
    "item",
    "BMap",
    "Point",
    "lng",
    "lat",
    "instance",
    "Polyline",
    "addOverlay"
  ],
  "mappings": "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",
  "sourcesContent": [
    "import { useState, useEffect, useMemo } from 'react';\nimport { useMapContext } from '@uiw/react-baidu-map-map';\nimport { useEnableProperties, useProperties, useVisiable, useEventProperties } from '@uiw/react-baidu-map-utils';\nimport { PolylineProps } from './';\n\nexport interface UsePolyline extends PolylineProps {}\n\nexport function usePolyline(props = {} as UsePolyline) {\n  const {\n    strokeColor,\n    strokeWeight,\n    strokeOpacity,\n    strokeStyle,\n    enableMassClear,\n    enableEditing,\n    enableClicking,\n    icons,\n  } = props;\n  const { map } = useMapContext();\n  const [polyline, setPolyline] = useState<BMap.Polyline>();\n  const [path, setPath] = useState(props.path || []);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const opts = {\n    strokeColor,\n    strokeWeight,\n    strokeOpacity,\n    strokeStyle,\n    enableMassClear,\n    enableEditing,\n    enableClicking,\n    icons,\n  };\n  useEffect(() => {\n    return () => {\n      if (polyline && map) {\n        map.removeOverlay(polyline);\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [map]);\n  useMemo(() => {\n    if (map && !polyline) {\n      const points = (props.path || []).map((item) => new BMap.Point(item.lng, item.lat));\n      const instance = new BMap.Polyline(points, opts);\n      map.addOverlay(instance);\n      setPolyline(instance);\n    }\n  }, [map, opts, polyline, props.path]);\n\n  useEffect(() => {\n    if (path && polyline) {\n      const points = path.map((item) => new BMap.Point(item.lng, item.lat));\n      polyline.setPath(points);\n    }\n  }, [polyline, path]);\n\n  useVisiable(polyline!, props);\n  useEventProperties<BMap.Polyline, UsePolyline>(polyline!, props, [\n    'Click',\n    'DblClick',\n    'MouseDown',\n    'MouseUp',\n    'MouseOut',\n    'MouseOver',\n    'Remove',\n    'LineUpdate',\n  ]);\n  useEnableProperties<BMap.Polyline, UsePolyline>(polyline!, props, ['Editing', 'MassClear']);\n  // PositionAt\n  useProperties<BMap.Polyline, UsePolyline>(polyline!, props, [\n    'StrokeColor',\n    'StrokeOpacity',\n    'StrokeWeight',\n    'StrokeStyle',\n  ]);\n\n  return {\n    polyline,\n    setPolyline,\n    path,\n    setPath,\n  };\n}\n"
  ]
}