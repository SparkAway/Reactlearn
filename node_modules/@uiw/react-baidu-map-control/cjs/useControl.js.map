{
  "version": 3,
  "sources": [
    "../src/useControl.tsx"
  ],
  "names": [
    "useControl",
    "props",
    "children",
    "container",
    "control",
    "setControl",
    "offset",
    "anchor",
    "map",
    "Control",
    "instance",
    "addOverlay",
    "removeControl"
  ],
  "mappings": ";;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAKO,SAASA,UAAT,GAA8C;AAAA,MAA1BC,KAA0B,uEAAlB,EAAkB;;AACnD,sBAAsB,sCAAa;AAAEC,IAAAA,QAAQ,EAAED,KAAK,CAACC;AAAlB,GAAb,CAAtB;AAAA,MAAQC,SAAR,iBAAQA,SAAR;;AACA,kBAA8B,sBAA9B;AAAA;AAAA,MAAOC,OAAP;AAAA,MAAgBC,UAAhB;;AACA,MAAQC,MAAR,GAA2BL,KAA3B,CAAQK,MAAR;AAAA,MAAgBC,MAAhB,GAA2BN,KAA3B,CAAgBM,MAAhB;;AACA,uBAAgB,sCAAhB;AAAA,MAAQC,GAAR,kBAAQA,GAAR;;AAEA,wBAAU,YAAM;AACd,QAAIA,GAAG,IAAI,CAACJ,OAAR,IAAmBH,KAAK,CAACC,QAA7B,EAAuC;AACrC,UAAMO,QAAO,GAAG,0BAAhB;;AACA,UAAMC,QAAQ,GAAG,IAAID,QAAJ,CAAYN,SAAZ,EAAuBI,MAAvB,EAA+BD,MAA/B,CAAjB;AACAD,MAAAA,UAAU,CAACK,QAAD,CAAV;AACAF,MAAAA,GAAG,CAACG,UAAJ,CAAeD,QAAf;AACD;;AACD,WAAO,YAAM;AACX,UAAIF,GAAG,IAAIJ,OAAX,EACE,aAAM;AACJI,QAAAA,GAAG,CAACI,aAAJ,CAAkBR,OAAlB;AACD,OAFD;AAGH,KALD;AAMD,GAbD,EAaG,CAACI,GAAD,EAAMJ,OAAN,EAAeG,MAAf,EAAuBD,MAAvB,EAA+BH,SAA/B,EAA0CF,KAAK,CAACC,QAAhD,CAbH;AAeA,uCAAYE,OAAZ,EAAsBH,KAAtB;AACA,yCAAwCG,OAAxC,EAAkDH,KAAlD,EAAyD,CAAC,QAAD,EAAW,QAAX,CAAzD;AACA,SAAO;AACLG,IAAAA,OAAO,EAAPA,OADK;AAELC,IAAAA,UAAU,EAAVA;AAFK,GAAP;AAID",
  "sourcesContent": [
    "import { useState, useEffect } from 'react';\nimport { useMapContext } from '@uiw/react-baidu-map-map';\nimport { useProperties, useVisiable, useRenderDom } from '@uiw/react-baidu-map-utils';\nimport getControl from './getControl';\nimport { ControlProps } from './';\n\nexport interface UseControl extends ControlProps {}\n\nexport function useControl(props = {} as UseControl) {\n  const { container } = useRenderDom({ children: props.children });\n  const [control, setControl] = useState<BMap.Control>();\n  const { offset, anchor } = props;\n  const { map } = useMapContext();\n\n  useEffect(() => {\n    if (map && !control && props.children) {\n      const Control = getControl();\n      const instance = new Control(container, anchor, offset);\n      setControl(instance);\n      map.addOverlay(instance);\n    }\n    return () => {\n      if (map && control)\n        () => {\n          map.removeControl(control);\n        };\n    };\n  }, [map, control, anchor, offset, container, props.children]);\n\n  useVisiable(control!, props);\n  useProperties<BMap.Control, UseControl>(control!, props, ['Anchor', 'Offset']);\n  return {\n    control,\n    setControl,\n  };\n}\n"
  ]
}