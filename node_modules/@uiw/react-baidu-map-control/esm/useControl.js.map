{
  "version": 3,
  "sources": [
    "../src/useControl.tsx"
  ],
  "names": [
    "useState",
    "useEffect",
    "useMapContext",
    "useProperties",
    "useVisiable",
    "useRenderDom",
    "getControl",
    "useControl",
    "props",
    "container",
    "children",
    "control",
    "setControl",
    "offset",
    "anchor",
    "map",
    "Control",
    "instance",
    "addOverlay",
    "removeControl"
  ],
  "mappings": "AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,aAAT,QAA8B,0BAA9B;AACA,SAASC,aAAT,EAAwBC,WAAxB,EAAqCC,YAArC,QAAyD,4BAAzD;AACA,OAAOC,UAAP,MAAuB,cAAvB;AAKA,OAAO,SAASC,UAAT,CAAoBC,KAApB,EAA8C;AAAA,MAA1BA,KAA0B;AAA1BA,IAAAA,KAA0B,GAAlB,EAAkB;AAAA;;AACnD,MAAM;AAAEC,IAAAA;AAAF,MAAgBJ,YAAY,CAAC;AAAEK,IAAAA,QAAQ,EAAEF,KAAK,CAACE;AAAlB,GAAD,CAAlC;AACA,MAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,EAAtC;AACA,MAAM;AAAEa,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAqBN,KAA3B;AACA,MAAM;AAAEO,IAAAA;AAAF,MAAUb,aAAa,EAA7B;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIc,GAAG,IAAI,CAACJ,OAAR,IAAmBH,KAAK,CAACE,QAA7B,EAAuC;AACrC,UAAMM,QAAO,GAAGV,UAAU,EAA1B;;AACA,UAAMW,QAAQ,GAAG,IAAID,QAAJ,CAAYP,SAAZ,EAAuBK,MAAvB,EAA+BD,MAA/B,CAAjB;AACAD,MAAAA,UAAU,CAACK,QAAD,CAAV;AACAF,MAAAA,GAAG,CAACG,UAAJ,CAAeD,QAAf;AACD;;AACD,WAAO,MAAM;AACX,UAAIF,GAAG,IAAIJ,OAAX,EACE,MAAM;AACJI,QAAAA,GAAG,CAACI,aAAJ,CAAkBR,OAAlB;AACD,OAFD;AAGH,KALD;AAMD,GAbQ,EAaN,CAACI,GAAD,EAAMJ,OAAN,EAAeG,MAAf,EAAuBD,MAAvB,EAA+BJ,SAA/B,EAA0CD,KAAK,CAACE,QAAhD,CAbM,CAAT;AAeAN,EAAAA,WAAW,CAACO,OAAD,EAAWH,KAAX,CAAX;AACAL,EAAAA,aAAa,CAA2BQ,OAA3B,EAAqCH,KAArC,EAA4C,CAAC,QAAD,EAAW,QAAX,CAA5C,CAAb;AACA,SAAO;AACLG,IAAAA,OADK;AAELC,IAAAA;AAFK,GAAP;AAID",
  "sourcesContent": [
    "import { useState, useEffect } from 'react';\nimport { useMapContext } from '@uiw/react-baidu-map-map';\nimport { useProperties, useVisiable, useRenderDom } from '@uiw/react-baidu-map-utils';\nimport getControl from './getControl';\nimport { ControlProps } from './';\n\nexport interface UseControl extends ControlProps {}\n\nexport function useControl(props = {} as UseControl) {\n  const { container } = useRenderDom({ children: props.children });\n  const [control, setControl] = useState<BMap.Control>();\n  const { offset, anchor } = props;\n  const { map } = useMapContext();\n\n  useEffect(() => {\n    if (map && !control && props.children) {\n      const Control = getControl();\n      const instance = new Control(container, anchor, offset);\n      setControl(instance);\n      map.addOverlay(instance);\n    }\n    return () => {\n      if (map && control)\n        () => {\n          map.removeControl(control);\n        };\n    };\n  }, [map, control, anchor, offset, container, props.children]);\n\n  useVisiable(control!, props);\n  useProperties<BMap.Control, UseControl>(control!, props, ['Anchor', 'Offset']);\n  return {\n    control,\n    setControl,\n  };\n}\n"
  ]
}