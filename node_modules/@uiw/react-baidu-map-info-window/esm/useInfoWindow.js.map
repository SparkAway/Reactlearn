{
  "version": 3,
  "sources": [
    "../src/useInfoWindow.ts"
  ],
  "names": [
    "useState",
    "useEffect",
    "useMemo",
    "useMapContext",
    "useEnableProperties",
    "useProperties",
    "useVisiable",
    "useEventProperties",
    "useRenderDom",
    "useInfoWindow",
    "props",
    "position",
    "opts",
    "container",
    "children",
    "title",
    "map",
    "infoWindow",
    "setInfoWindow",
    "win",
    "BMap",
    "InfoWindow",
    "content",
    "restore",
    "isOpen",
    "setIsOpen",
    "undefined",
    "closeInfoWindow",
    "point",
    "Point",
    "lng",
    "lat",
    "openInfoWindow",
    "setContent",
    "setTitle"
  ],
  "mappings": "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",
  "sourcesContent": [
    "import { useState, useEffect, useMemo } from 'react';\nimport { useMapContext } from '@uiw/react-baidu-map-map';\nimport {\n  useEnableProperties,\n  useProperties,\n  useVisiable,\n  useEventProperties,\n  useRenderDom,\n} from '@uiw/react-baidu-map-utils';\nimport { InfoWindowProps } from '.';\n\nexport interface UseInfoWindow extends InfoWindowProps {}\n\nexport function useInfoWindow(props = {} as UseInfoWindow) {\n  const { position, ...opts } = props;\n  const { container } = useRenderDom({ children: props.children });\n  const { container: title } = useRenderDom({ children: props.title || '' });\n  const { map } = useMapContext();\n  const [infoWindow, setInfoWindow] = useState<BMap.InfoWindow>();\n  useMemo(() => {\n    if (!infoWindow && map) {\n      opts.title = title;\n      const win = new BMap.InfoWindow(props.children ? container : opts.content || '', {\n        ...opts,\n      } as BMap.InfoWindowOptions);\n      setInfoWindow(win);\n    }\n    return () => {\n      if (infoWindow) {\n        infoWindow.restore();\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [map]);\n\n  const [isOpen, setIsOpen] = useState(opts.isOpen === undefined ? true : opts.isOpen);\n  useEffect(() => {\n    if (map && BMap && infoWindow) {\n      if (!isOpen) {\n        map.closeInfoWindow();\n      } else if (position) {\n        const point = new BMap.Point(position.lng, position.lat);\n        map.openInfoWindow(infoWindow, point);\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOpen, infoWindow]);\n\n  useEffect(() => {\n    if (infoWindow) {\n      infoWindow.setContent(props.children ? container : opts.content || '');\n    }\n  }, [props.content, props.children]);\n\n  useEffect(() => {\n    if (infoWindow) {\n      infoWindow.setTitle(title);\n    }\n  }, [props.content, title]);\n\n  useVisiable(infoWindow!, props);\n  useEventProperties<BMap.InfoWindow, UseInfoWindow>(infoWindow!, props, [\n    'Close',\n    'Open',\n    'Maximize',\n    'Restore',\n    'ClickClose',\n  ]);\n  useProperties<BMap.InfoWindow, UseInfoWindow>(infoWindow!, props, [\n    'Width',\n    'Height',\n    'Title',\n    // 'Content',\n    'MaxContent',\n  ]);\n  useEnableProperties<BMap.InfoWindow, UseInfoWindow>(infoWindow!, props, ['CloseOnClick', 'Maximize', 'AutoPan']);\n\n  return {\n    /**\n     * 信息窗口实例对象\n     */\n    infoWindow,\n    /**\n     * 更新 信息窗口实例对象\n     */\n    setInfoWindow,\n    isOpen,\n    setIsOpen,\n  };\n}\n"
  ]
}