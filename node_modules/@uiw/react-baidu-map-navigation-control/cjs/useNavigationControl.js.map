{
  "version": 3,
  "sources": [
    "../src/useNavigationControl.tsx"
  ],
  "names": [
    "useNavigationControl",
    "props",
    "navigationControl",
    "setNavigationControl",
    "anchor",
    "offset",
    "type",
    "showZoomInfo",
    "enableGeolocation",
    "map",
    "instance",
    "BMap",
    "NavigationControl",
    "BMAP_ANCHOR_TOP_LEFT",
    "addControl",
    "removeControl"
  ],
  "mappings": ";;;;;;;;;;;AAAA;;AACA;;AACA;;AAKO,SAASA,oBAAT,GAAkE;AAAA,MAApCC,KAAoC,uEAA5B,EAA4B;;AACvE,kBAAkD,sBAAlD;AAAA;AAAA,MAAOC,iBAAP;AAAA,MAA0BC,oBAA1B;;AACA,MAAQC,MAAR,GAAkEH,KAAlE,CAAQG,MAAR;AAAA,MAAgBC,MAAhB,GAAkEJ,KAAlE,CAAgBI,MAAhB;AAAA,MAAwBC,IAAxB,GAAkEL,KAAlE,CAAwBK,IAAxB;AAAA,MAA8BC,YAA9B,GAAkEN,KAAlE,CAA8BM,YAA9B;AAAA,MAA4CC,iBAA5C,GAAkEP,KAAlE,CAA4CO,iBAA5C;;AACA,uBAAgB,sCAAhB;AAAA,MAAQC,GAAR,kBAAQA,GAAR;;AACA,wBAAU,YAAM;AACd,QAAI,CAACA,GAAD,IAAQP,iBAAZ,EAA+B;AAC/B,QAAMQ,QAAQ,GAAG,IAAIC,IAAI,CAACC,iBAAT,CAA2B;AAC1CR,MAAAA,MAAM,EAAEA,MAAM,IAAIS,oBADwB;AAE1CR,MAAAA,MAAM,EAANA,MAF0C;AAG1CC,MAAAA,IAAI,EAAJA,IAH0C;AAI1CC,MAAAA,YAAY,EAAZA,YAJ0C;AAK1CC,MAAAA,iBAAiB,EAAjBA;AAL0C,KAA3B,CAAjB;AAOAC,IAAAA,GAAG,CAACK,UAAJ,CAAeJ,QAAf;AACAP,IAAAA,oBAAoB,CAACO,QAAD,CAApB;AACA,WAAO,YAAM;AACX,UAAID,GAAG,IAAIC,QAAX,EAAqB;AACnBD,QAAAA,GAAG,CAACM,aAAJ,CAAkBL,QAAlB;AACD;AACF,KAJD,CAXc,CAgBd;AACD,GAjBD,EAiBG,CAACD,GAAD,CAjBH;AAmBA,uCAAYP,iBAAZ,EAAgCD,KAAhC;AACA,yCAA4DC,iBAA5D,EAAgFD,KAAhF,EAAuF,CAAC,QAAD,EAAW,QAAX,EAAqB,MAArB,CAAvF;AACA,SAAO;AACLC,IAAAA,iBAAiB,EAAjBA,iBADK;AAELC,IAAAA,oBAAoB,EAApBA;AAFK,GAAP;AAID",
  "sourcesContent": [
    "import { useEffect, useState } from 'react';\nimport { useMapContext } from '@uiw/react-baidu-map-map';\nimport { useProperties, useVisiable } from '@uiw/react-baidu-map-utils';\nimport { NavigationControlProps } from './';\n\nexport interface UseNavigationControl extends NavigationControlProps {}\n\nexport function useNavigationControl(props = {} as UseNavigationControl) {\n  const [navigationControl, setNavigationControl] = useState<BMap.NavigationControl>();\n  const { anchor, offset, type, showZoomInfo, enableGeolocation } = props;\n  const { map } = useMapContext();\n  useEffect(() => {\n    if (!map || navigationControl) return;\n    const instance = new BMap.NavigationControl({\n      anchor: anchor || BMAP_ANCHOR_TOP_LEFT,\n      offset,\n      type,\n      showZoomInfo,\n      enableGeolocation,\n    });\n    map.addControl(instance);\n    setNavigationControl(instance);\n    return () => {\n      if (map && instance) {\n        map.removeControl(instance);\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [map]);\n\n  useVisiable(navigationControl!, props);\n  useProperties<BMap.NavigationControl, UseNavigationControl>(navigationControl!, props, ['Anchor', 'Offset', 'Type']);\n  return {\n    navigationControl,\n    setNavigationControl,\n  };\n}\n"
  ]
}