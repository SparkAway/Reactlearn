{
  "version": 3,
  "sources": [
    "../src/useNavigationControl.tsx"
  ],
  "names": [
    "useEffect",
    "useState",
    "useMapContext",
    "useProperties",
    "useVisiable",
    "useNavigationControl",
    "props",
    "navigationControl",
    "setNavigationControl",
    "anchor",
    "offset",
    "type",
    "showZoomInfo",
    "enableGeolocation",
    "map",
    "instance",
    "BMap",
    "NavigationControl",
    "BMAP_ANCHOR_TOP_LEFT",
    "addControl",
    "removeControl"
  ],
  "mappings": "AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,aAAT,QAA8B,0BAA9B;AACA,SAASC,aAAT,EAAwBC,WAAxB,QAA2C,4BAA3C;AAKA,OAAO,SAASC,oBAAT,CAA8BC,KAA9B,EAAkE;AAAA,MAApCA,KAAoC;AAApCA,IAAAA,KAAoC,GAA5B,EAA4B;AAAA;;AACvE,MAAM,CAACC,iBAAD,EAAoBC,oBAApB,IAA4CP,QAAQ,EAA1D;AACA,MAAM;AAAEQ,IAAAA,MAAF;AAAUC,IAAAA,MAAV;AAAkBC,IAAAA,IAAlB;AAAwBC,IAAAA,YAAxB;AAAsCC,IAAAA;AAAtC,MAA4DP,KAAlE;AACA,MAAM;AAAEQ,IAAAA;AAAF,MAAUZ,aAAa,EAA7B;AACAF,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACc,GAAD,IAAQP,iBAAZ,EAA+B;AAC/B,QAAMQ,QAAQ,GAAG,IAAIC,IAAI,CAACC,iBAAT,CAA2B;AAC1CR,MAAAA,MAAM,EAAEA,MAAM,IAAIS,oBADwB;AAE1CR,MAAAA,MAF0C;AAG1CC,MAAAA,IAH0C;AAI1CC,MAAAA,YAJ0C;AAK1CC,MAAAA;AAL0C,KAA3B,CAAjB;AAOAC,IAAAA,GAAG,CAACK,UAAJ,CAAeJ,QAAf;AACAP,IAAAA,oBAAoB,CAACO,QAAD,CAApB;AACA,WAAO,MAAM;AACX,UAAID,GAAG,IAAIC,QAAX,EAAqB;AACnBD,QAAAA,GAAG,CAACM,aAAJ,CAAkBL,QAAlB;AACD;AACF,KAJD,CAXc,CAgBd;AACD,GAjBQ,EAiBN,CAACD,GAAD,CAjBM,CAAT;AAmBAV,EAAAA,WAAW,CAACG,iBAAD,EAAqBD,KAArB,CAAX;AACAH,EAAAA,aAAa,CAA+CI,iBAA/C,EAAmED,KAAnE,EAA0E,CAAC,QAAD,EAAW,QAAX,EAAqB,MAArB,CAA1E,CAAb;AACA,SAAO;AACLC,IAAAA,iBADK;AAELC,IAAAA;AAFK,GAAP;AAID",
  "sourcesContent": [
    "import { useEffect, useState } from 'react';\nimport { useMapContext } from '@uiw/react-baidu-map-map';\nimport { useProperties, useVisiable } from '@uiw/react-baidu-map-utils';\nimport { NavigationControlProps } from './';\n\nexport interface UseNavigationControl extends NavigationControlProps {}\n\nexport function useNavigationControl(props = {} as UseNavigationControl) {\n  const [navigationControl, setNavigationControl] = useState<BMap.NavigationControl>();\n  const { anchor, offset, type, showZoomInfo, enableGeolocation } = props;\n  const { map } = useMapContext();\n  useEffect(() => {\n    if (!map || navigationControl) return;\n    const instance = new BMap.NavigationControl({\n      anchor: anchor || BMAP_ANCHOR_TOP_LEFT,\n      offset,\n      type,\n      showZoomInfo,\n      enableGeolocation,\n    });\n    map.addControl(instance);\n    setNavigationControl(instance);\n    return () => {\n      if (map && instance) {\n        map.removeControl(instance);\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [map]);\n\n  useVisiable(navigationControl!, props);\n  useProperties<BMap.NavigationControl, UseNavigationControl>(navigationControl!, props, ['Anchor', 'Offset', 'Type']);\n  return {\n    navigationControl,\n    setNavigationControl,\n  };\n}\n"
  ]
}