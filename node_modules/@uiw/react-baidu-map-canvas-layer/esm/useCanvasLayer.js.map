{
  "version": 3,
  "sources": [
    "../src/useCanvasLayer.tsx"
  ],
  "names": [
    "useState",
    "useMemo",
    "useMapContext",
    "useVisiable",
    "useCanvasLayer",
    "props",
    "zIndex",
    "paneName",
    "map",
    "canvasLayer",
    "setCanvasLayer",
    "BMap",
    "update",
    "self",
    "instance",
    "CanvasLayer",
    "addOverlay"
  ],
  "mappings": ";AAAA,SAASA,QAAT,EAAmBC,OAAnB,QAAkC,OAAlC;AACA,SAASC,aAAT,QAA8B,0BAA9B;AACA,SAASC,WAAT,QAA4B,4BAA5B;AAcA,OAAO,SAASC,cAAT,CAAwBC,KAAxB,EAAsD;AAAA,MAA9BA,KAA8B;AAA9BA,IAAAA,KAA8B,GAAtB,EAAsB;AAAA;;AAC3D,MAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAuBF,KAA7B;AACA,MAAM;AAAEG,IAAAA;AAAF,MAAUN,aAAa,EAA7B;AACA,MAAM,CAACO,WAAD,EAAcC,cAAd,IAAgCV,QAAQ,EAA9C;AACAC,EAAAA,OAAO,CAAC,MAAM;AACZ,QAAIO,GAAG,IAAIG,IAAP,IAAe,CAACF,WAApB,EAAiC;AAC/B,UAAMG,MAAM,GAAG,SAATA,MAAS,GAAmC;AAChD,YAAMC,IAAI,GAAG,IAAb;AACAR,QAAAA,KAAK,CAACO,MAAN,IAAgBP,KAAK,CAACO,MAAN,cAAkBC,IAAlB;AAAwBF,UAAAA,IAAxB;AAA8BH,UAAAA;AAA9B,WAAhB;AACD,OAHD;;AAIA,UAAMM,QAAQ,GAAG,IAAIH,IAAI,CAACI,WAAT,CAAqB;AAAET,QAAAA,MAAF;AAAUC,QAAAA,QAAV;AAAoBK,QAAAA;AAApB,OAArB,CAAjB;AACAJ,MAAAA,GAAG,CAACQ,UAAJ,CAAeF,QAAf;AACAJ,MAAAA,cAAc,CAACI,QAAD,CAAd;AACD,KATW,CAUZ;;AACD,GAXM,EAWJ,CAACN,GAAD,EAAMC,WAAN,CAXI,CAAP;AAaAN,EAAAA,WAAW,CAACM,WAAD,EAAeJ,KAAf,CAAX;AAEA,SAAO;AACLI,IAAAA,WADK;AAELC,IAAAA;AAFK,GAAP;AAID",
  "sourcesContent": [
    "import { useState, useMemo } from 'react';\nimport { useMapContext } from '@uiw/react-baidu-map-map';\nimport { useVisiable } from '@uiw/react-baidu-map-utils';\nimport { CanvasLayerProps } from '.';\n\nexport interface UseCanvasLayer extends CanvasLayerProps {}\n\nexport interface CanvasLayerResult {\n  canvas: React.HTMLAttributes<HTMLCanvasElement>;\n  ba: React.HTMLAttributes<HTMLCanvasElement>;\n  options: BMap.CanvasLayerOptions;\n  zIndex: number;\n  map: UseCanvasLayer['map'];\n  BMap: UseCanvasLayer['BMap'];\n}\n\nexport function useCanvasLayer(props = {} as UseCanvasLayer) {\n  const { zIndex, paneName } = props;\n  const { map } = useMapContext();\n  const [canvasLayer, setCanvasLayer] = useState<BMap.CanvasLayer>();\n  useMemo(() => {\n    if (map && BMap && !canvasLayer) {\n      const update = function (this: CanvasLayerResult) {\n        const self = this;\n        props.update && props.update({ ...self, BMap, map });\n      };\n      const instance = new BMap.CanvasLayer({ zIndex, paneName, update });\n      map.addOverlay(instance);\n      setCanvasLayer(instance);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [map, canvasLayer]);\n\n  useVisiable(canvasLayer!, props);\n\n  return {\n    canvasLayer,\n    setCanvasLayer,\n  };\n}\n"
  ]
}